name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master

  workflow_dispatch:  # Para disparo manual

permissions:
  id-token: write
  contents: read
  
jobs:
  provision-iac-terraform:
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID4 }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_SECRET_ID4 }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID4 }}
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_client_secret: ${{ secrets.AZURE_SECRET_ID4 }}
      TF_VAR_resource_group_name: ${{ secrets.AKS_RESOURCE_GROUP4 }}
      TF_VAR_location: ${{ secrets.AZURE_REGION4 }}
      TF_VAR_vnet_name: ${{ secrets.TF_AZURE_VNET_NAME }}
      TF_VAR_vnet_address_space: "10.0.0.0/16"
      TF_VAR_subnet_name: ${{ secrets.TF_AZURE_SUBNET_NAME }}
      TF_VAR_node_pool_subnet_name: ${{ secrets.TF_AZURE_NODE_POLL_SUBNET_NAME }}
      TF_VAR_node_pool_subnet_address_prefix: "10.0.3.0/24"
      TF_VAR_subnet_address_prefix: "10.0.2.0/24"
      TF_VAR_aks_cluster_name: ${{ secrets.AKS_CLUSTER_NAME4 }}
      TF_VAR_dns_prefix: ${{ secrets.TF_AZURE_DNS_PREFIX }}
      TF_VAR_node_pool_name: "default"
      TF_VAR_node_count: "1"
      TF_VAR_vm_size: "Standard_DS2_v2"
      TF_VAR_network_plugin: "azure"
      TF_VAR_dns_service_ip: "10.0.10.10"
      TF_VAR_service_cidr: "10.0.10.0/24"
      TF_VAR_docker_bridge_cidr: "172.17.0.1/16"          
      TF_VAR_environment: "Development"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: terraform init
        working-directory: terraform/aks
        
        #verfica se RG existe, caso exista primeiro destroi ambiente depois constroi
      - name: Terraform Check if resource exists
        id: check_resource
        run: |
          # Exemplo: Verificar se um grupo de recursos existe
          if terraform show -json | jq '.values.root_module.resources[] | select(.type == "azurerm_resource_group")' > /dev/null; then
            echo "::set-output name=exists::true"
          else
            echo "::set-output name=exists::false"
          fi

      - name: Terraform Destroy
        if: steps.check_resource.outputs.exists == 'true'
        run: terraform destroy -auto-approve || echo "Nothing to destroy"
        
      - name: Terraform Apply 
        id: applyTF2
        run: terraform apply -auto-approve
        working-directory: terraform/aks
        
  build-and-push-docker-image:
    runs-on: ubuntu-latest
    needs: provision-iac-terraform
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install
        working-directory: node-app #comentario

      - name: Lint code
        run: npm run lint
        working-directory: node-app

#    - name: Test code
#      run: npm test
#      working-directory: node-app

      - name: Build Docker image
        run: |
          docker build -t ${{ github.repository }}:latest .
       
        working-directory: node-app

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Push Docker image to Azure Container Registry
        run: |
          docker tag ${{ github.repository }}:latest ${{ secrets.ACR_LOGIN_SERVER }}/${{ github.repository }}:latest
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ github.repository }}:latest

  deploy-to-aks:
    runs-on: ubuntu-latest
    needs: build-and-push-docker-image
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID4 }}
          client-secret: ${{ secrets.AZURE_SECRET_ID4 }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group "${{ secrets.AKS_RESOURCE_GROUP4 }}" --name "${{ secrets.AKS_CLUSTER_NAME4 }}" --overwrite-existing

      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s-deployment.yml
